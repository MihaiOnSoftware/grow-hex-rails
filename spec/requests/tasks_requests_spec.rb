# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/tasks', type: :request do
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: "A Title"
    }
  end

  let(:invalid_attributes) do
    {
      not_a_title: "Not A Title"
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Task.create! valid_attributes
      get tasks_url, headers: { accept: 'application/json' }
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    let(:task) { Task.create! valid_attributes }

    it 'renders a successful response' do
      get task_url(task), headers: { accept: 'application/json' }
      expect(response).to be_successful
    end

    it 'returns a json with a task' do
      get task_url(task), headers: { accept: 'application/json' }
      expect(JSON.parse(response.body)).to eq(task.attributes.slice("id", "title").merge("tags" => []))
    end

    it 'includes tag titles in the json if available' do
      tag = Tag.create!(title: 'A Tag')
      task.tags << tag
      tag2 = Tag.create!(title: 'Another Tag')
      task.tags << tag2

      get task_url(task), headers: { accept: 'application/json' }

      task_attributes = task.attributes.slice("id", "title")
      tag_titles = { "tags" => [{ "title" => tag.title }, { "title" => tag2.title }] }
      expect(JSON.parse(response.body)).to eq(task_attributes.merge(tag_titles))
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Task' do
        expect do
          post tasks_url, params: { task: valid_attributes }, headers: { accept: 'application/json' }
        end.to change(Task, :count).by(1)
      end

      it "adds a tag" do
        tag = Tag.create!(title: "A Tag")
        post tasks_url, params: { task: valid_attributes.merge(tags: [tag.title]) }, headers: { accept: 'application/json' }
        expect(Task.first.tags).to include(tag)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Task' do
        expect do
          post tasks_url, params: { task: invalid_attributes }, headers: { accept: 'application/json' }
        end.to change(Task, :count).by(0)
      end

      it 'renders a unsuccessful response' do
        post tasks_url, params: { task: invalid_attributes }, headers: { accept: 'application/json' }
        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: "A New Title"
        }
      end

      let(:task) { Task.create! valid_attributes }

      it 'updates the requested task' do
        patch task_url(task), params: { task: new_attributes }, headers: { accept: 'application/json' }
        task.reload
        expect(task.title).to eq('A New Title')
      end

      it 'responds with the updated task' do
        patch task_url(task), params: { task: new_attributes }, headers: { accept: 'application/json' }
        expect(response.body).to include('A New Title')
      end

      it "adds a tag" do
        tag = Tag.create!(title: "A Tag")
        patch task_url(task), params: { task: { tags: [tag.title] } }, headers: { accept: 'application/json' }
        task.reload
        expect(task.tags).to include(tag)
      end

      it "removes a tag" do
        tag = Tag.create!(title: "A Tag")
        tag2 = Tag.create!(title: "Another Tag")
        task = Task.create! valid_attributes.merge(tags: [tag, tag2])
        patch task_url(task), params: { task: { tags: [tag.title] } }, headers: { accept: 'application/json' }
        task.reload
        expect(task.tags.to_a).to eq([tag])
      end

      it "creates a new tag when the tag doesn't exist" do
        tag_title = "A New Tag"
        patch task_url(task), params: { task: { tags: [tag_title] } }, headers: { accept: 'application/json' }
        expect(task.tags.first.title).to eq(tag_title)
      end
    end

    context 'with invalid parameters' do
      it "does not update the task" do
        task = Task.create! valid_attributes
        original_title = task.title

        patch task_url(task), params: { task: invalid_attributes }, headers: { accept: 'application/json' }
        task.reload
        expect(task.title).to eq(original_title)
      end

      it "responds with a bad request" do
        task = Task.create! valid_attributes
        patch task_url(task), params: { task: invalid_attributes }, headers: { accept: 'application/json' }
        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested task' do
      task = Task.create! valid_attributes
      expect do
        delete task_url(task), headers: { accept: 'application/json' }
      end.to change(Task, :count).by(-1)
    end
  end
end
